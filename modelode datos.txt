1. credenciales de mongoDB atlas //terapiaonlinepy   //2ZibwTugDRAOFFng

2. claudinary es para guardar las imagenes credenciales:
CLOUDINARY_CLOUD_NAME=imagenesapis
CLOUDINARY_API_KEY=162761949312671
CLOUDINARY_API_SECRET=MyJxQ0boamqQBVDZE-Iuu9PRH6o

3. Render abre con usuario github



Persona
idpersona
idusuario
numero de cedula
nombres
apellidos
fecha de nacimiento
sexo

Usuario
nombreusuario
email
password

Tipos de terapias
id tipo de terapia
tituloterapia
descricpion
procedimiento

Especialista
nombres
apellidos
foto
especialidad
precio
rating
experiencia
biografia

Horario_especialista
id
fecha
dia
Hora

Sala
idsala
estatus
descripcion

Sesion
idsala
idespecialista
idpersona
idhorario
estatus de sala
descricpion

reserva
idpersona
especialista 
idhorario
monto
codigopago 



// Los metodos que faltan en usuario 
const nodemailer = require('nodemailer');
const crypto = require('crypto');

// Configura tu transporter (puedes usar Gmail, Mailtrap, etc.)
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: 'devsvenezuela.gerencia@gmail.com',
    pass: 'argt ghys nhxk lipr'
  }
});

// Mapa temporal para guardar códigos (en producción, guárdalo en MongoDB)
const resetCodes = new Map();

// 1️⃣ Enviar código por email
router.post('/reset-password', async (req, res) => {
  const { email } = req.body;

  try {
    const usuario = await Usuario.findOne({ email });
    if (!usuario) {
      return res.status(404).json({ error: 'Usuario no encontrado' });
    }

    const code = crypto.randomInt(100000, 999999).toString();
    resetCodes.set(email, code);

    await transporter.sendMail({
      from: 'tuemail@gmail.com',
      to: email,
      subject: 'Código para resetear contraseña',
      text: `Tu código es: ${code}`
    });

    res.json({ message: 'Código enviado al correo electrónico' });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// 2️⃣ Verificar código
router.post('/verify-code', (req, res) => {
  const { email, code } = req.body;
  const storedCode = resetCodes.get(email);

  if (storedCode === code) {
    res.json({ message: 'Código válido' });
  } else {
    res.status(400).json({ error: 'Código incorrecto' });
  }
});

// 3️⃣ Actualizar contraseña
router.post('/update-password', async (req, res) => {
  const { email, code, newPassword } = req.body;
  const storedCode = resetCodes.get(email);

  if (storedCode !== code) {
    return res.status(400).json({ error: 'Código incorrecto' });
  }

  try {
    const usuario = await Usuario.findOne({ email });
    if (!usuario) {
      return res.status(404).json({ error: 'Usuario no encontrado' });
    }

    usuario.password = newPassword;
    await usuario.save();

    resetCodes.delete(email);

    res.json({ message: 'Contraseña actualizada correctamente' });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});
